import java.util.*;

public class Pain {
    public static void main(String[] args) {
        int[] arr = new int[] {1, 1, 1, 2, 2, 3, 5, 5, 5};
        int k = 2;
        System.out.println(Arrays.toString(topKFrequent(arr, k)));
        System.out.println(Arrays.toString(topKFrequent2(arr, k)));
    }

//    https://leetcode.com/problems/top-k-frequent-elements/

    //    Bucket Sorting
    public static int[] topKFrequent(int[] arr, int k) {
        Map<Integer, Integer> map = new HashMap<>();

        for(int i : arr){
            map.put(i, map.getOrDefault(i, 0) + 1);
        }

        List<Integer>[] bucket = new ArrayList[arr.length + 1];

        for(int key : map.keySet()){
            int freq = map.get(key);
            if(bucket[freq] == null){
                bucket[freq] = new ArrayList<>();
            }
            bucket[freq].add(key);
        }

        int[] res = new int[k];
        int index = 0;
        for(int i = bucket.length - 1; i >= 0; i--){
            if(bucket[i] != null){
                for(int val : bucket[i]){
                    res[index++] = val;
                    if(index == k) return res;
                }
            }
        }
        return res;
    }

    //    MaxHeap
    public static int[] topKFrequent2(int[] arr, int k) {
        Map<Integer, Integer> map = new HashMap<>();

        for (int x : arr) {
            map.put(x, map.getOrDefault(x, 0) + 1);
        }

        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a,b) -> map.get(b) - map.get(a));

        maxHeap.addAll(map.keySet());

        int[] res = new int[k];
        for(int i = 0; i < k; i++){
            res[i] = maxHeap.poll();
        }
        return res;
    }
}
