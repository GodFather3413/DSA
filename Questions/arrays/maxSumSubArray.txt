public class MaxMin {

    // Given an integer array nums, find the contiguous subarray (containing at least one number)
    // which has the largest sum and return its sum.

    public static void main(String[] args) {

//        int[] arr = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
//        int[] arr = {-2, -3, -1, -5};
        int[] arr = {5, 4, -1, 7, 8, -2, 1};
//        System.out.println(minSubArr(arr));
        System.out.println(maxSumSubArray(arr));

    }

    // Brute force  ------------>    o(n*n)
    static int minSubArr(int[] arr){
        int sum = Integer.MIN_VALUE;
        for(int i = 0; i < arr.length; i++){
            int temp = 0;
            for(int j = i; j < arr.length; j++){
                temp += arr[j];
                if(temp > sum){
                    sum = temp;
                }
            }
        }

        return sum;
    }

    // Kadane's Algorithm
    static int maxSumSubArray(int[] arr){
        int maxSum = Integer.MIN_VALUE;
        int curSum = 0;

        for (int x : arr) {
            curSum += x;

            if (curSum > maxSum) {
                maxSum = curSum;
            }

            if (curSum < 0) {
                curSum = 0;
            }
        }

        return maxSum;
    }

}
