import java.util.Arrays;

public class Solution {
    public static void main(String[] args) {
        int[] arr = new int[]{-2, 1, -3, 4, -1, 2, 1, -5, 4, 5};
        int k = 2;
        System.out.println("Maximum sum possible of dynamic length: " + getMaxSum(arr));
        System.out.println("Maximum sum possible of " + k + " Length : " + getMaxSumSize(arr, k));
        System.out.println("Maximum sum possible of " + k + " Array : "  + Arrays.toString(getMaxSumArr(arr, k)));
        System.out.println(minSubArr(arr));
    }

// Kadane's Algorithm
    static int getMaxSum(int[] arr){
        int maxSum = Integer.MIN_VALUE;
        int currSum = 0;

        for(int x : arr){
            currSum += x;

            if(currSum > maxSum){
                maxSum = currSum;
            }

            if(currSum < 0){
                currSum = 0;
            }

        }
        return maxSum;
    }

    static int getMaxSumSize(int[] arr, int k){
        if(k > arr.length){
            return 0;
        }
        int s = 0;
        int e = 0;
        int maxSum = Integer.MIN_VALUE;
        int currSum = 0;

        while(e < arr.length){
            currSum += arr[e];
            if(e - s + 1 == k){
                maxSum = Math.max(currSum,maxSum);
                currSum -= arr[s];
                s++;
            }
            e++;
        }

        return maxSum;
    }

    static int[] getMaxSumArr(int[] arr, int k){
        if(k > arr.length){
            return null;
        }
        int s = 0;
        int e = 0;
        int start = 0;
        int maxSum = Integer.MIN_VALUE;
        int currSum = 0;

        while(e < arr.length){
            currSum += arr[e];
            if(e - s + 1 == k){
                maxSum = Math.max(currSum,maxSum);
                currSum -= arr[s];
                start = s;
                s++;
            }
            e++;
        }

        int[] sol = new int[k];
        for(int i = 0; i < k; i++){
            sol[i] = arr[start];
            start++;
        }

        return sol;
    }

// Brute force  ------------>    o(n*n)
    static int minSubArr(int[] arr){
        int sum = Integer.MIN_VALUE;
        for(int i = 0; i < arr.length; i++){
            int temp = 0;
            for(int j = i; j < arr.length; j++){
                temp += arr[j];
                if(temp > sum){
                    sum = temp;
                }
            }
        }

        return sum;
    }

}
