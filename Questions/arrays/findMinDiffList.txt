import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Chocolate {

        //  Input : arr[] = {12, 4, 7, 9, 2, 23, 25, 41, 30, 40, 28, 42, 30, 44, 48, 43, 50} , m = 7
        //  Output: Minimum Difference is 10
        //  Explanation We need to pick 7 packets. We pick 40, 41,
        //  42, 44, 48, 43 and 50 to minimize difference between maximum and minimum.

    public static void main(String[] args) {
        int[] arr = new int[]{12, 4, 7, 9, 2, 23, 25, 41, 30, 40, 28, 42, 30, 44, 48, 43, 50};
//        int[] arr = new int[]{7, 3, 2, 4, 9, 12, 56};
        int m = 7;
//        int m = 3;
        int n = arr.length;
        System.out.println(findMinDiff(arr, n, m));
        System.out.println(findMinDiffList(arr, n, m));
    }

    static int findMinDiff(int[] arr, int n, int m) {
        if (m == 0 || n == 0)
            return 0;

        Arrays.sort(arr);

        if (n < m)
            return -1;

        int min_diff = Integer.MAX_VALUE;

        for (int i = 0; i + m - 1 < n; i++) {
            int diff = arr[i+m-1] - arr[i];
            if (diff < min_diff)
                min_diff = diff;
        }
        return min_diff;
    }

    static List<Integer> findMinDiffList(int[] arr, int n, int m) {
        if (m == 0 || n == 0)
            return null;

        if (n < m)
            return null;

        Arrays.sort(arr);
        List<Integer> list = new ArrayList<>();

        int min_diff = Integer.MAX_VALUE;

        int start = 0;
        int end = 0;
        for (int i = 0; i + m - 1 < n; i++) {
            int diff = arr[i+m-1] - arr[i];
            if (diff < min_diff){
                min_diff = diff;
                start = arr[i];
                end = arr[i+m-1];
            }
        }

        for(int i = start; i <= end; i++){
            list.add(i);
        }

        return list;
    }

}
