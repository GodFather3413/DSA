package com.kanchanJS;

public class Test{

    public static void main(String[] args) {
        String str1 = "My name is Fran";
        String str = "MynameisFran";
        String str2 = "rim";

        System.out.println("Minimum window : " + minWindow(str1, str2));
        System.out.println("Longest Substring - at most K distinct characters : " + lengthOfLongestSubstringKDistinct(str1,4));
        System.out.println("Longest Substring - at most 2 distinct characters : " + str1 + " : " +  lengthOfLongestSubstringTwoDistinct(str1));
        System.out.println("Longest Substring - at most 2 distinct characters : " + str + " : " + lengthOfLongestSubstringTwoDistinct(str));
        System.out.println("LongestSubstring - without repeating characters for " + str1 + " : " + lengthOfLongestSubstring2(str1));
        System.out.println("LongestSubstring - without repeating characters for " + str + " : " + lengthOfLongestSubstring2(str));
    }


    //    Minimum window
    static String minWindow(String s, String t) {
        int [] map = new int[128];
        for (char c : t.toCharArray()) {
            map[c]++;
        }
        int start = 0, end = 0, minStart = 0, minLen = Integer.MAX_VALUE, counter = t.length();
        while (end < s.length()) {
            final char c1 = s.charAt(end);
            if (map[c1] > 0) counter--;
            map[c1]--;
            end++;
            while (counter == 0) {
                if (minLen > end - start) {
                    minLen = end - start;
                    minStart = start;
                }
                final char c2 = s.charAt(start);
                map[c2]++;
                if (map[c2] > 0) counter++;
                start++;
            }
        }

        return minLen == Integer.MAX_VALUE ? "" : s.substring(minStart, minStart + minLen);
    }


    //    Longest Substring - at most K distinct characters
    static int lengthOfLongestSubstringKDistinct(String s, int k) {
        int[] map = new int[256];
        int start = 0, end = 0, maxLen = Integer.MIN_VALUE, counter = 0;

        while (end < s.length()) {
            final char c1 = s.charAt(end);
            if (map[c1] == 0) counter++;
            map[c1]++;
            end++;

            while (counter > k) {
                final char c2 = s.charAt(start);
                if (map[c2] == 1) counter--;
                map[c2]--;
                start++;
            }

            maxLen = Math.max(maxLen, end - start);
        }

        return maxLen;
    }


    //    Longest Substring - at most 2 distinct characters
    static int lengthOfLongestSubstringTwoDistinct(String s) {
        int[] map = new int[128];
        int start = 0, end = 0, maxLen = 0, counter = 0;

        while (end < s.length()) {
            final char c1 = s.charAt(end);
            if (map[c1] == 0) counter++;
            map[c1]++;
            end++;

            while (counter > 2) {
                final char c2 = s.charAt(start);
                if (map[c2] == 1) counter--;
                map[c2]--;
                start++;
            }

            maxLen = Math.max(maxLen, end - start);
        }

        return maxLen;
    }


    //    LongestSubstring - without repeating characters
    static int lengthOfLongestSubstring2(String s) {
        int[] map = new int[128];
        int start = 0, end = 0, maxLen = 0, counter = 0;

        while (end < s.length()) {
            final char c1 = s.charAt(end);
            if (map[c1] > 0) counter++;
            map[c1]++;
            end++;

            while (counter > 0) {
                final char c2 = s.charAt(start);
                if (map[c2] > 1) counter--;
                map[c2]--;
                start++;
            }

            maxLen = Math.max(maxLen, end - start);
        }
        return maxLen;
    }
}
