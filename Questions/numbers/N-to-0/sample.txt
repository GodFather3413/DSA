import java.util.Arrays;

public class Pain{
    public static void main(String[] args) {
        int num = 27;   // 9 4
        System.out.println(getSol(num));
        System.out.println(countStepsToOne(num));
        System.out.println(sol(num));
    }

//    Operations required to reduce number from n to 0
//    3 options :-
//      1)  minus 1
//      2)  minus Math.pow(2,x)
//      3)  minus Math.pow(3,x)
    static int getSol(int num){
        int count = 0;

        while(num > 0){
            int temp;
            if(num % 2 != 0){
                temp = (int)Math.pow(3, getPow(num));
            } else {
                temp = (int)Math.pow(2, getPow(num));
            }
            num -= temp;
            count++;
        }

        return num == 0 ? count : -1;
    }

    static int getPow(int num){
        int count = 0;
        if(num % 2 != 0){
            while(num >= Math.pow(3, count)){
                count++;
            }
        } else {
            while(num >= Math.pow(2, count)){
                count++;
            }
        }
        return count - 1;
    }

    //  Min step to reach one
//    1)  minus 1
//    2)  if num % 2 == 0 -> num/2
//    2)  if num % 3 == 0 -> num/3

    public static int countStepsToOne(int n) {
        if(n <= 1) return 0;
        //dp array for memoization
        int[] dp = new int[n+1];
        Arrays.fill(dp, -1);
        dp[0] = dp[1] = 0;
        int temp = solve(n, dp);
        return dp[n];
    }

    public static int solve(int n, int[] dp) {
        if(n <= 1) return 0;
        int x = Integer.MAX_VALUE, y = Integer.MAX_VALUE, z;
        //Checking if the sub problem is already solved

        if(dp[n] != -1) return dp[n];
        z = 1 + solve(n-1, dp);
        if(n%3 == 0) x = 1 + solve(n/3, dp);
        if(n%2 == 0) y = 1 + solve(n/2, dp);

        return dp[n] = Math.min(x, Math.min(y,z));
    }



    //    Square root of a number
    static int sol(int num){
        int sol = 0;
        for(int i = 0; i * i <= num; i++){
            sol = Math.max(sol, i);
        }
        return sol;
    }

}
