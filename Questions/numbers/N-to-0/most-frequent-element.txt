import java.util.Arrays;

public class Gain {
    public static void main(String[] args) {
        int[] arr = new int[]{ 9930,9923,9983,9997,9934,9952,9945,9914,9985,9982,9970,9932,9985,9902,9975,9990,
                9922,9990,9994,9937,9996,9964,9943,9963,9911,9925,9935,9945,9933,9916,9930,9938,10000,9916,9911,
                9959,9957,9907,9913,9916,9993,9930,9975,9924,9988,9923,9910,9925,9977,9981,9927,9930,9927,9925,
                9923,9904,9928,9928,9986,9903,9985,9954,9938,9911,9952,9974,9926,9920,9972,9983,9973,9917,9995,
                9973,9977,9947,9936,9975,9954,9932,9964,9972,9935,9946,9966 };
        int target = 3056;
        System.out.println(maxFrequency(arr, target));
        System.out.println(maxFrequency2(arr, target));
        System.out.println(maxFrequency3(arr, target));
    }

//    https://leetcode.com/problems/frequency-of-the-most-frequent-element/
    public static int maxFrequency(int[] arr, long target) {
        int count = 1, i, j = 0;
        long sum = 0;
        Arrays.sort(arr);
        for (i = 0; i < arr.length; i++) {
            sum += arr[i];
            while (sum + target < (long)arr[i] * (i - j + 1)) {
                sum -= arr[j];
                j += 1;
            }
            count = Math.max(count, i - j + 1);
        }
        return count;
    }

    public static int maxFrequency2(int[] arr, long target) {
        int i = 0, j;
        Arrays.sort(arr);
        for (j = 0; j < arr.length; ++j) {
            target += arr[j];
            if (target < (long)arr[j] * (j - i + 1))
                target -= arr[i++];
        }
        return j - i;
    }

    static int maxFrequency3(int[] arr, int target){
        Arrays.sort(arr);
        if(arr.length < 2){
            return 1;
        }
        int currSum = 0;
        int count = 1;
        for(int i = 1; i < arr.length; i++){
            currSum  += arr[i] - arr[i - 1];
            if(currSum <= target){
                count++;
                target -= currSum;
            }
        }

        return count;
    }

}
