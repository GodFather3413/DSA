package com.kanchanJS;

public class DLL{
    private Node head;
    private Node tail;
    private int size;

    public class Node{
        private int value;
        private Node next;
        private Node prev;

        public Node(int value){
            this.value = value;
        }

        public Node(int value, Node next, Node prev){
            this.value = value;
            this.next = next;
            this.prev = prev;
        }
    }

    public void insertFirst(int value){
        Node node = new Node(value);
        node.next = head;
        node.prev = null;
        if(head != null){
            head.prev = node;
        }
        head = node;
        size++;
    }

    public void insertLast(int value){
        Node node = new Node(value);
        Node last = head;

        if(head == null){
//            node.prev = null;
            head = node;
            return;
        }

        while(last.next != null){
            last = last.next;
        }

        last.next = node;
//        node.prev = last;
        size++;
    }

    public void insert(int value, int val){
        Node pointer = find(value);

        if(pointer == null){
            System.out.println("Does not exists");
            return;
        }

        Node node = new Node(val);
        node.next = pointer.next;
        pointer.next = node;
        size++;
    }

    public Node find(int value){
        Node node = head;
        while(node != null){
            if(node.value == value){
                return node;
            }
            node = node.next;
        }
        return null;
    }

    public void display(){
        Node temp = head;
        while(temp != null){
            System.out.print(temp.value + " -> ");
            temp = temp.next;
        }
        System.out.println("NULL");
    }

    public void deleteFirst(){
        head = head.next;
        if(head == null){
            tail = null;
        }
        size--;
    }

    public void deleteLast(){
        if(size < 2){
            deleteFirst();
            return;
        }
        Node secondLast = get(size - 2);

        Node last = head;
        while(last != null){
            last = last.next;
        }

        last = secondLast;
        last.next = null;
        size--;
    }

//    public void reverse(Node node){
//        if(node == tail){
//            head = tail;
//            return;
//        }
//
//        reverse(node.next);
//        tail.next = node;
//        tail = node;
//        tail.next = null;
//    }

    public void reverse(){
        if(size < 2){
            return;
        }

        Node prev = null;
        Node present = head;
        Node next = present.next;

        while(present!=null){
            present.next = prev;
            prev = present;
            present = next;
            if(next != null){
                next = next.next;
            }
        }
        head = prev;
    }

    public Node get(int index){
        Node temp = head;
        for(int i = 0; i < index; i++){
            temp = temp.next;
        }
        return temp;
    }
}